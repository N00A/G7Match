plugins {
	id 'java'
    id "jacoco"
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id("io.swagger.core.v3.swagger-gradle-plugin") version "2.2.36"
	id "org.sonarqube" version "6.2.0.5505"
}

group = 'com.G7Match'
version = '0.0.1-SNAPSHOT'
description = 'Proyecto de gestion de reservas deportivas curso seminario de actualizacion 1041B'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	implementation 'org.hibernate.orm:hibernate-core:6.5.2.Final'
	implementation 'com.microsoft.sqlserver:mssql-jdbc:12.8.1.jre11'

}

tasks.named('test') {
	useJUnitPlatform()
    finalizedBy tasks.named('jacocoTestReport')
}

tasks.named('jacocoTestReport', JacocoReport) {
    dependsOn tasks.test
    reports {
        xml.required.set(true)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir('reports/jacoco/test/html'))
    }

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, include: ['com/G7Match/rdg7/services/**'])
    }))
}

jacoco {
    toolVersion = "0.8.11"
}

plugins.withType(JacocoPlugin).configureEach {
    test.finalizedBy 'jacocoTestReport'
}
sonar {
	properties {
		property "sonar.projectKey", "N00A_G7Match"
		property "sonar.organization", "n00a"
	}
}
